name: Dev CI/CD

on:
  push:
    branches:
      - dev

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.DEV_TURBO_TEAM }}
  TURBO_API: ${{ secrets.TURBO_API }}
  TURBO_REMOTE_CACHE_SIGNATURE_KEY: ${{ secrets.TURBO_REMOTE_CACHE_SIGNATURE_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          npm install -g turbo
          pnpm install  --frozen-lockfile

      - name: Load env files
        run: |
          echo "${{ secrets.DEV_WEB_ENV_FILE }}" > apps/web/.env
          echo "${{ secrets.DEV_API_ENV_FILE }}" > apps/upload-api/.env
          echo "${{ secrets.DEV_REDIS_ENV_FILE }}" > packages/redis/.env

      - name: Build Redis package
        run: pnpm turbo run build --filter=@learningapp/redis

      - name: Build entire project
        run: pnpm turbo run build

      - name: Deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" << 'EOF'
          cd ~/dev-online-course-platform
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          if ! command -v pnpm &> /dev/null; then
            echo "pnpm not found. Installing..."
            npm install -g pnpm
          fi
          echo "PNPM version: $(pnpm --version)"
          git pull
          pnpm install --frozen-lockfile
          pnpm run build
          pm2 restart all
          EOF
