"use client";

import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import Link from "next/link";
import { FormEventHandler, useState } from "react";

interface Props {
  qrCode: string;
  secretCode: string;
}

const TwoFactorForm = ({ qrCode, secretCode }: Props) => {
  const [showSecret, setShowSecret] = useState(false);
  const [loading, setLoading] = useState(false);
  const [msg, setMsg] = useState("");
  const [success, setSuccess] = useState(false);

  const handleSubmit: FormEventHandler<HTMLFormElement> = async (e) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);

    const enteredCode = formData.get("enteredCode");

    try {
      setLoading(true);
      setMsg("");

      setSuccess(false);

      const res = await fetch("/api/auth/two-factor/set", {
        method: "POST",
        body: JSON.stringify({ enteredCode, secretCode }),
      });

      const resData = await res.json();

      if (res.status !== 200) {
        setMsg(resData.message);
      } else {
        setSuccess(true);
        setMsg(
          "MultiFactor (2-FA) Integration Success. Save the recovery codes"
        );
      }
    } catch (error) {
      setMsg("Server Error. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <h2 className="text-2xl  font-bold my-2">Step 1: Set up</h2>
      <div className="flex flex-wrap h-full flex-col md:flex-row  justify-between border-2 ">
        <div className="flex-1 items-center flex flex-col justify-center">
          <h3 className="my-2 text-xl font-semibold">Scan the qr code</h3>
          <img src={qrCode} alt="qr code" />
        </div>
        <div className="flex flex-col flex-1 h-auto items-center justify-center border-l-2">
          {showSecret ? (
            <p className="font-bold">{secretCode}</p>
          ) : (
            <p>Can&apos;t scan? Set up with code</p>
          )}
          <button
            onClick={() => setShowSecret((prev) => !prev)}
            className="bg-blue-700 text-white px-5 my-2 text-sm py-2 rounded-md "
          >
            {showSecret ? "Hide Code" : "Display Code"}
          </button>
        </div>
      </div>

      <h2 className="text-2xl font-bold mt-5 mb-2">Step 2: Enter Code</h2>
      <form
        onSubmit={handleSubmit}
        className="md:w-1/2 my-4 w-full flex flex-col gap-2 md:flex-row mx-auto"
      >
        <input
          name="enteredCode"
          className="bg-transparent border-2 border-gray-700 md:w-3/4 w-full rounded-md px-2 py-2"
          type="text"
          required
          placeholder="Enter 6 digit code generated by your app"
        />

        <Button
          type="submit"
          variant="app"
          disabled={loading}
          className="bg-blue-700 text-white text-sm rounded-md px-3 py-2 flex items-center justify-center gap-2"
        >
          {loading ? (
            <>
              <Loader2 className="mx-auto animate-spin" />
            </>
          ) : (
            <>Verify</>
          )}
        </Button>
      </form>

      <div className="flex items-center justify-center w-full">
        {msg && (
          <p
            className={` ${
              success ? "bg-green-600" : "bg-red-600"
            } my-5 rounded-md w-fit px-2 py-2  text-white`}
          >
            {msg}
          </p>
        )}
      </div>

      {success ? (
        <Button className="mx-auto mb-5 block w-fit" variant="app" asChild>
          <Link href="/recovery-codes">View Recovery Codes</Link>
        </Button>
      ) : null}
    </div>
  );
};

export default TwoFactorForm;
